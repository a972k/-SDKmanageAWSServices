import boto3
import botocore
from resources import region, source_bucket, destination_bucket, sns_topic_name, subscription_email

# AWS Clients      
s3 = boto3.client('s3', region_name=region)
sns = boto3.client('sns', region_name=region)

# Function to create S3 bucket
def create_bucket(bucket_name):
    try:
        s3.create_bucket(
            Bucket=bucket_name,
            CreateBucketConfiguration={'LocationConstraint': region}
        )
        print(f" Created bucket: {bucket_name}")
    except botocore.exceptions.ClientError as e:
        if e.response['Error']['Code'] == 'BucketAlreadyOwnedByYou':
            print(f"â„¹ Bucket {bucket_name} already exists and is owned by you.")
        else:
            print(f" Failed to create bucket {bucket_name}: {e}")

# Function to create SNS topic
def create_sns_topic(topic_name):
    response = sns.create_topic(Name=topic_name)
    topic_arn = response['TopicArn']
    print(f" Created SNS topic: {topic_name}")
    return topic_arn

# Function to subscribe email to SNS topic, note: the user must confirm the subscription
def subscribe_email(topic_arn, email):
    sns.subscribe(
        TopicArn=topic_arn,
        Protocol='email',
        Endpoint=email
    )
    print(f" Subscription request sent to {email}. Please confirm it in your inbox.")

# Function to write configuration to resources.py by deleting the old file and creating a new one
def write_config_to_file(topic_arn):
    with open('resources.py', 'w') as f:
        f.write(f"""# Auto-generated by setup_resources.py

# Configuration for AWS s3
source_bucket = "{source_bucket}"
destination_bucket = "{destination_bucket}"
region = "{region}"

# Configuration for SNS
sns_topic_name = "{sns_topic_name}"
sns_topic_arn = "{topic_arn}"
subscription_email = "{subscription_email}"

# Configuration for file movement
prefix = "customer-details/sr1_"
destination_folder = "sr1/"
""")
    print(" Updated resources.py with new configuration.")

# Main function to set up the infrastructure 
def setup_infrastructure():
    print(" Setting up AWS resources...")
    create_bucket(source_bucket)
    create_bucket(destination_bucket)
    topic_arn = create_sns_topic(sns_topic_name)
    subscribe_email(topic_arn, subscription_email)
    write_config_to_file(topic_arn)
    print(" Setup complete.")
    
if __name__ == "__main__":
    setup_infrastructure()
